@page "/"
@using System.Net.Http.Headers
@using System.Text
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using BlazorToastify
@inject ClipboardService ClipboardService
@inject HttpClient Http
@inject IToastService ToastService;

<nav class="z-20 start-0 top-0 w-full bg-white">
    <div class="mx-auto flex max-w-full flex-wrap items-center p-4">
        <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse">
            <h2 class="mr-5 text-3xl font-bold">Shortly</h2>
        </a>
        <div class="flex flex-grow justify-end space-x-3 rtl:space-x-reverse md:justify-between md:flex-grow-0 md:min-w-fit md:w-[150px] md:order-2 md:space-x-0">
            <button type="button" class="text-grayish-violet hover:text-black">Login</button>
            <button type="button" class="rounded-full bg-grayish-violet px-4 py-2 text-white hover:bg-slate-900">Signup</button>
            <button type="button" class="inline-flex h-10 w-10 items-center justify-center rounded-lg p-2 text-sm text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 md:hidden dark:hover:bg-gray-700 dark:focus:ring-gray-600" @onclick="ToggleMenu">
                <span class="sr-only">Open main menu</span>
                <svg class="h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15" />
                </svg>
            </button>
        </div>
        <div class="h-full w-full flex-grow items-start justify-between justify-items-center md:flex md:w-auto md:order-1 @menuDisplay" id="navbar">
            <ul class="mt-4 flex w-full flex-col items-center rounded-lg border border-gray-100 bg-gray-50 p-4 font-medium rtl:space-x-reverse md:items-start md:p-0 md:space-x-8 md:flex-row md:mt-0 md:border-0 md:bg-white">
                <li>
                    <a href="#" class="mr-4 text-grayish-violet hover:text-slate-900">Features</a>
                </li>
                <li>
                    <a href="#" class="mr-4 text-grayish-violet hover:text-slate-900">Pricing</a>
                </li>
                <li>
                    <a href="#" class="text-grayish-violet hover:text-slate-900">Resources</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<section class="mb-[72px] flex flex-col-reverse md:flex-row">
    <div class="h-[500px] flex flex-col items-center justify-center">
        <h1 class="text-center text-5xl font-bold" tabindex="-1">More than just shorter links</h1>
        <p class="mt-4 text-center text-grayish-violet">Build your brand’s recognition and get detailed insights on how your links are performing.</p>
        <a href="/signup" class="mt-8 rounded-full bg-cyan px-6 py-3 text-white hover:bg-slate-900">Get Started</a>
    </div>
    <div>
        <img src="/images/illustration-working.svg" alt="Illustration of a person working on a computer" class="w-full" />
    </div>
</section>
<section class="flex flex-col">
    <div class="-z-10 absolute left-0 h-full w-screen overflow-x-hidden bg-shorten-urls"></div>
    <div class="z-10 -mt-[72px] flex w-full rounded-xl bg-dark-violet bg-cover bg-no-repeat p-12 md:bg-shorten-desktop-pattern sm:bg-shorten-mobile-pattern">
        <input type="url" placeholder="Shorten a link here..." class="mx-4 flex-grow rounded px-4" @bind="@urlToShorten" @ref="urlInput" />
        <button type="submit" class="ml-auto rounded-xl bg-cyan px-6 py-3 text-white hover:bg-slate-900" @onclick="ShortenLink">Shorten It!</button>
    </div>
    <div class="z-10 mb-4 mt-4">
        @foreach (var url in shortenedUrls)
        {
            <div class="flex w-full items-center rounded bg-white p-6">
                <div class="flex-grow"><a href="@url.Url" target="_blank">@url.Url</a></div>
                <div class="ml-auto">
                    <a class="mr-4 text-cyan" href="@url.shortUrl" target="_blank">@url.shortUrl</a>
                    <button class="ml-auto rounded px-6 py-3 text-white hover:bg-slate-900 @url.additionalButtonClass" @onclick="() => CopyUrl(url.shortUrl, url.Id)" disabled="@url.isDisabled">
                        @url.buttonText
                    </button>
                </div>
            </div>
        }
    </div>
    <div class="flex h-48 flex-col items-center justify-center">
        <h2 class="text-4xl font-bold">Advanced Statistics</h2>
        <p class="mt-4 text-center text-grayish-violet">Track how your links are performing across the web with our advanced statistics dashboard.</p>
    </div>
    <div class="flex min-h-96 flex-col md:flex-row">
        <div class="flex flex-col items-start p-6">
            <div class="relative rounded bg-white p-6">
                <div class="absolute -top-8 w-16 rounded-full bg-dark-violet p-4">
                    <img src="/images/icon-brand-recognition.svg" alt="Brand recognition icon" />
                </div>
                <h3 class="mt-4 text-left text-2xl font-bold">Brand Recognition</h3>
                <p class="mt-2 text-left text-grayish-violet">Boost your brand recognition with each click. Generic links don’t mean a thing. Branded links help instil confidence in your content.</p>
            </div>
        </div>
        <div class="flex flex-col items-start p-6">
            <div class="hidden h-12 w-full md:inline-block"></div>
            <div class="relative rounded bg-white p-6">
                <div class="absolute -top-8 w-16 rounded-full bg-dark-violet p-4">
                    <img src="/images/icon-detailed-records.svg" alt="Detailed records icon" />
                </div>
                <h3 class="mt-4 text-left text-2xl font-bold">Detailed Records</h3>
                <p class="mt-2 text-left text-grayish-violet">Gain insights into who is clicking your links. Knowing when and where people engage with your content helps inform better decisions.</p>
            </div>
        </div>
        <div class="flex flex-col items-start p-6">
            <div class="hidden h-24 w-full md:inline-block"></div>
            <div class="relative rounded bg-white p-6">
                <div class="absolute -top-8 w-16 rounded-full bg-dark-violet p-4">
                    <img src="/images/icon-fully-customizable.svg" alt="Fully customizable icon" />
                </div>
                <h3 class="mt-4 text-left text-2xl font-bold">Fully Customizable</h3>
                <p class="mt-2 text-left text-grayish-violet">Improve brand awareness and content discoverability through customizable links, supercharging audience engagement.</p>
            </div>
        </div>
    </div>
</section>
<section>
    <div class="-z-10 absolute left-0 h-72 w-screen overflow-x-hidden bg-dark-violet bg-cover bg-no-repeat md:bg-boost-desktop-texture sm:bg-boost-mobile-texture"></div>
    <div class="bottom-0 m-0 flex h-72 flex-col items-center justify-center text-white">
        <h2 class="text-4xl font-bold">Boost your links today</h2>
        <a href="/signup" class="mt-4 rounded-full bg-cyan px-6 py-3 text-white hover:bg-slate-900">Get Started</a>
    </div>
</section>
<ToastContainer />

@code {
    private string urlToShorten = string.Empty;
    private ElementReference urlInput;
    private List<shortUrls> shortenedUrls = new List<shortUrls>();
    private bool isMenuOpen = false;
    private string menuDisplay => isMenuOpen ? "flex" : "hidden";

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    private async Task ShortenLink()
    {
        var result = await ShortUrlAsync(urlToShorten);
        if (result.StartsWith("Error"))
        {
            await ToastService.AddToastAsync(message: result, type: "error", animation: "fade", autoClose: 5000);
        }
    }

    private async Task<string> ShortUrlAsync(string urlOriginal)
    {
        try
        {
            if (string.IsNullOrEmpty(urlOriginal))
            {
                throw new Exception("Please enter a URL to shorten");
            }

            if (!Uri.TryCreate(urlOriginal, UriKind.Absolute, out Uri uriResult) || (uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps))
            {
                throw new Exception("Invalid URL");
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "https://smolurl.com/api/links");
            request.Headers.Add("Accept", "application/json");
            request.Content = new StringContent(JsonConvert.SerializeObject(new { url = urlOriginal }), Encoding.UTF8, "application/json");

            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var resultado = await response.Content.ReadAsStringAsync();
            var json = JObject.Parse(resultado);
            if (json != null && json.ContainsKey("data"))
            {
                var shortUrl = json["data"]["short_url"].ToString();
                shortenedUrls.Add(new shortUrls
                    {
                        Id = shortenedUrls.Count,
                        Url = urlOriginal,
                        shortUrl = shortUrl
                    });
                urlToShorten = string.Empty;
                return shortUrl;
            }

            throw new Exception("Invalid response from the server");
        }
        catch (Exception ex)
        {
            return $"Error: {ex.Message}";
        }
    }


    private async Task CopyUrl(string url, int index)
    {
        shortenedUrls[index].isDisabled = true;
        shortenedUrls[index].buttonText = "Copied!";
        shortenedUrls[index].additionalButtonClass = "bg-slate-900";
        await ClipboardService.WriteTextAsync(url);
        await Task.Delay(5000);
        shortenedUrls[index].buttonText = "Copy";
        shortenedUrls[index].additionalButtonClass = "bg-cyan";
        shortenedUrls[index].isDisabled = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await urlInput.FocusAsync(preventScroll: true);
        }
    }
}
